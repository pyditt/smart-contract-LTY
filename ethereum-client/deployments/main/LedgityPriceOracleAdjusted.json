{
  "address": "0x6F373EED27B6C7ed6ACD79222c0C062f2337941c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blockTimestampLast",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "changePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x14cc23ab2359ba62521956c682a8ba82ec9211793f7e4ae45f397159f913a62a",
  "receipt": {
    "to": null,
    "from": "0x47D6466449fF0A70AAabBE78Fb5F9D461A0ab17B",
    "contractAddress": "0x6F373EED27B6C7ed6ACD79222c0C062f2337941c",
    "transactionIndex": 88,
    "gasUsed": "1399329",
    "logsBloom": "0x
    "blockHash": "0xc2bfd93c099f3d22feb57412e3eeea850ba0ba0f51a337e52a6c4ada55e25d3a",
    "transactionHash": "0x14cc23ab2359ba62521956c682a8ba82ec9211793f7e4ae45f397159f913a62a",
    "logs": [
      {
        "transactionIndex": 88,
        "blockNumber": 13152739,
        "transactionHash": "0x14cc23ab2359ba62521956c682a8ba82ec9211793f7e4ae45f397159f913a62a",
        "address": "0x6F373EED27B6C7ed6ACD79222c0C062f2337941c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000047d6466449ff0a70aaabbe78fb5f9d461a0ab17b"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0xc2bfd93c099f3d22feb57412e3eeea850ba0ba0f51a337e52a6c4ada55e25d3a"
      }
    ],
    "blockNumber": 13152739,
    "cumulativeGasUsed": "6896509",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbe5b2c7D8E990B71767CF6d95573386e1d3d1995"
  ],
  "solcInputHash": "745368e496a1a69e0e9e6a66c885f077",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"changePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"consult(address,uint256)\":{\"details\":\"Returns the price of tokens.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"tryUpdate()\":{\"details\":\"Update average price.\",\"returns\":{\"_0\":\"`true` if update successful; `false` if period has not yet elapsed.\"}},\"update()\":{\"details\":\"Update average price. Reverts if period has not yet elapsed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LedgityPriceOracleAdjusted.sol\":\"LedgityPriceOracleAdjusted\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/lib/contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1c2a281a00f4660775f75ccfa1e51fbe1d75f86aeb9d0d297151ecdb900177\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary BitMath {\\n    // returns the 0 indexed position of the most significant bit of the input x\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    // returns the 0 indexed position of the least significant bit of the input x\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::leastSignificantBit: zero');\\n\\n        r = 255;\\n        if (x & uint128(-1) > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & uint64(-1) > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & uint32(-1) > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & uint16(-1) > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & uint8(-1) > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x19f84d5268286794b44939ec0d85b3c6f59e133f826cdbd9e40112fc94919bb7\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0;\\n\\nimport './FullMath.sol';\\nimport './Babylonian.sol';\\nimport './BitMath.sol';\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, 'FixedPoint::muli: overflow');\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, 'FixedPoint::divuq: division by zero');\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= uint144(-1)) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0xc3a39b8a11715cea45ad9f67f50e4e4c33778c1124acd59e90daf064c9a93974\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity >=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xc4ffcf28169f73fc9fdd1f82345d6d4fcccf3fd5aea83c133437c25e4e0950a9\",\"license\":\"CC-BY-4.0\"},\"contracts/LedgityPriceOracleAdjusted.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport './interfaces/IUniswapV2Factory.sol';\\nimport './interfaces/IUniswapV2Pair.sol';\\nimport './interfaces/ILedgityPriceOracle.sol';\\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\\nimport './libraries/SafeMath.sol';\\nimport './libraries/Ownable.sol';\\nimport './libraries/UniswapV2OracleLibrary.sol';\\n\\n// SPDX-License-Identifier: Unlicensed\\ncontract LedgityPriceOracleAdjusted is ILedgityPriceOracle, Ownable {\\n    using FixedPoint for *;\\n    using SafeMath for uint;\\n\\n    uint public period = 12 hours;\\n    IUniswapV2Pair pair;\\n    address public immutable token0;\\n    address public immutable token1;\\n    uint    public price0CumulativeLast;\\n    uint    public price1CumulativeLast;\\n    uint32  public blockTimestampLast;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    constructor(address pair_) public {\\n        IUniswapV2Pair _pair = IUniswapV2Pair(pair_);\\n        pair = _pair;\\n        token0 = _pair.token0();\\n        token1 = _pair.token1();\\n        changePeriod(12 hours);\\n    }\\n\\n    function update() external override {\\n        require(tryUpdate(), 'LedgityPriceOracle: PERIOD_NOT_ELAPSED');\\n    }\\n\\n    function tryUpdate() public override returns (bool) {\\n        uint32 timeElapsed = UniswapV2OracleLibrary.currentBlockTimestamp() - blockTimestampLast;\\n        if (timeElapsed < period) {\\n            return false;\\n        }\\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n        return true;\\n    }\\n\\n    function consult(address token, uint amountIn) external view override returns (uint amountOut) {\\n        if (token == token0) {\\n            amountOut = price0Average.mul(amountIn).decode144();\\n        } else {\\n            require(token == token1, 'LedgityPriceOracle: INVALID_TOKEN');\\n            amountOut = price1Average.mul(amountIn).decode144();\\n        }\\n        // XXX adjust price.\\n        // 8425 is the recorded initial price\\n        // 4000 is the expected initial price\\n        amountOut = amountOut.mul(8425).div(4000);\\n    }\\n\\n    function changePeriod(uint256 _period) public onlyOwner {\\n        require(_period > 0, 'LedgityPriceOracle: INVALID_PERIOD');\\n        period = _period;\\n        price0CumulativeLast = pair.price0CumulativeLast();\\n        price1CumulativeLast = pair.price1CumulativeLast();\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, 'LedgityPriceOracle: NO_RESERVES'); // ensure that there's liquidity in the pair\\n        price0Average = FixedPoint.encode(reserve1).divuq(FixedPoint.encode(reserve0));\\n        price1Average = FixedPoint.encode(reserve0).divuq(FixedPoint.encode(reserve1));\\n    }\\n}\\n\",\"keccak256\":\"0x8daaadfe500501c82d18499536fb86dc53295366cdd2cb3726cb31c61bea2f24\",\"license\":\"Unlicensed\"},\"contracts/interfaces/ILedgityPriceOracle.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface ILedgityPriceOracle {\\n    /**\\n     * @dev Update average price.\\n     * @return `true` if update successful; `false` if period has not yet elapsed.\\n     */\\n    function tryUpdate() external returns (bool);\\n\\n    /**\\n     * @dev Update average price. Reverts if period has not yet elapsed.\\n     */\\n    function update() external;\\n\\n    /**\\n     * @dev Returns the price of tokens.\\n     */\\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\\n}\\n\",\"keccak256\":\"0x67a5efed708fe394fb97ad517b932658ff61b0a241fcc87566268befa99dbd6b\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xc869b21c0a9bc523f2ddd09beb3fdae79b37eac49ed5a6fe1d4a55d919f613bf\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xd66ffba293ecbcb52d6b60c584c5f2c9d93f9f6001001635e2c06a7db973f3a2\"},\"contracts/libraries/Context.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa8ed5bc722107d4edef25a726d5c120e7f53a97b689f7e401093efcd921c286b\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () public {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4b156282d021c0245e499de14e6f6c6f1472d2d6f33a4888dd6adad8337d65ff\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x169d02c36bb73cf2ff63e1d38d7d23bb0a6004615bfa81ae56e6ee53632e6166\"},\"contracts/libraries/UniswapV2OracleLibrary.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport '../interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0b1a5f321990cfb85cb94d00ff2227a30e4186e1e6230209977b3a0ffbae818c\"}},\"version\":1}",
  "bytecode": "0x60c060405261a8c06001553480156200001757600080fd5b5060405162001d6538038062001d65833981810160405260208110156200003d57600080fd5b505160006200004b620001be565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b0319166001600160a01b03831690811790915560408051630dfe168160e01b81529051839291630dfe1681916004808301926020929190829003018186803b158015620000ec57600080fd5b505afa15801562000101573d6000803e3d6000fd5b505050506040513d60208110156200011857600080fd5b505160601b6001600160601b0319166080526040805163d21220a760e01b815290516001600160a01b0383169163d21220a7916004808301926020929190829003018186803b1580156200016b57600080fd5b505afa15801562000180573d6000803e3d6000fd5b505050506040513d60208110156200019757600080fd5b505160601b6001600160601b03191660a052620001b661a8c0620001c2565b5050620008cf565b3390565b620001cc620001be565b6000546001600160a01b039081169116146200022f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111620002705760405162461bcd60e51b815260040180806020018281038252602281526020018062001d436022913960400191505060405180910390fd5b600181905560025460408051635909c0d560e01b815290516001600160a01b0390921691635909c0d591600480820192602092909190829003018186803b158015620002bb57600080fd5b505afa158015620002d0573d6000803e3d6000fd5b505050506040513d6020811015620002e757600080fd5b505160035560025460408051635a3d549360e01b815290516001600160a01b0390921691635a3d549391600480820192602092909190829003018186803b1580156200033257600080fd5b505afa15801562000347573d6000803e3d6000fd5b505050506040513d60208110156200035e57600080fd5b5051600490815560025460408051630240bc6b60e21b8152905160009384936001600160a01b031692630902f1ac9281830192606092829003018186803b158015620003a957600080fd5b505afa158015620003be573d6000803e3d6000fd5b505050506040513d6060811015620003d557600080fd5b50805160208201516040909201516005805463ffffffff191663ffffffff909216919091179055925090506001600160701b038216158015906200042157506001600160701b03811615155b62000473576040805162461bcd60e51b815260206004820152601f60248201527f4c65646769747950726963654f7261636c653a204e4f5f524553455256455300604482015290519081900360640190fd5b620004b76200048d836200052d60201b62000a331760201c565b620004a3836200052d60201b62000a331760201c565b6200055a60201b62000a651790919060201c565b51600680546001600160e01b0319166001600160e01b0390921691909117905562000508620004f2826200052d602090811b62000a3317901c565b620004a3846200052d60201b62000a331760201c565b51600780546001600160e01b0319166001600160e01b03909216919091179055505050565b62000537620008bd565b50604080516020810190915260709190911b600160701b600160e01b0316815290565b62000564620008bd565b81516001600160e01b0316620005ac5760405162461bcd60e51b815260040180806020018281038252602381526020018062001d206023913960400191505060405180910390fd5b815183516001600160e01b0390811691161415620005dd57506040805160208101909152600160701b815262000752565b82516001600160901b036001600160e01b03909116116200069f57815183516000916001600160e01b03169060701b6001600160701b031916816200061e57fe5b0490506001600160e01b038111156200067e576040805162461bcd60e51b815260206004820152601b60248201527f4669786564506f696e743a3a64697675713a206f766572666c6f770000000000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b031681525091505062000752565b6000620006d7600160701b85600001516001600160e01b031685600001516001600160e01b03166200075860201b62000c521760201c565b90506001600160e01b0381111562000736576040805162461bcd60e51b815260206004820152601b60248201527f4669786564506f696e743a3a64697675713a206f766572666c6f770000000000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150505b92915050565b600080806200076886866200081c565b91509150600084806200077757fe5b8688099050828111156200078c576001820391505b918290039181620007ad57848381620007a157fe5b04935050505062000815565b84821062000802576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b6200080f8383876200084a565b93505050505b9392505050565b600080806000198486099050838502925082810391508281101562000842576001820391505b509250929050565b600081810382168083816200085b57fe5b0492508085816200086857fe5b0494508081600003816200087857fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b60408051602081019091526000815290565b60805160601c60a05160601c61141d62000903600039806103eb528061090152508061034f5280610375525061141d6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063c5700a0211610066578063c5700a02146101eb578063d21220a71461020c578063ef78d4fd14610214578063f2fde38b1461021c576100f5565b80638da5cb5b146101b6578063a2e62045146101be578063a4bf1361146101c6578063a6bb4539146101e3576100f5565b80635909c0d5116100d35780635909c0d5146101785780635a3d5493146101805780635e6aaf2c14610188578063715018a6146101ac576100f5565b80630c88b753146100fa5780630dfe1681146101165780633ddac9531461013a575b600080fd5b610102610242565b604080519115158252519081900360200190f35b61011e61034d565b604080516001600160a01b039092168252519081900360200190f35b6101666004803603604081101561015057600080fd5b506001600160a01b038135169060200135610371565b60408051918252519081900360200190f35b6101666104ab565b6101666104b1565b6101906104b7565b604080516001600160e01b039092168252519081900360200190f35b6101b46104c6565b005b61011e61057a565b6101b4610589565b6101b4600480360360208110156101dc57600080fd5b50356105ce565b6101906108e4565b6101f36108f3565b6040805163ffffffff9092168252519081900360200190f35b61011e6108ff565b610166610923565b6101b46004803603602081101561023257600080fd5b50356001600160a01b0316610929565b600554600090819063ffffffff16610258610d0b565b0390506001548163ffffffff16101561027557600091505061034a565b60025460009081908190610291906001600160a01b0316610d15565b92509250925060405180602001604052808563ffffffff166003548603816102b557fe5b046001600160e01b039081169091529051600680546001600160e01b031916919092161790556040805160208101909152600454819063ffffffff8716908503816102fc57fe5b046001600160e01b039081169091529051600780546001600160e01b031916919092161790556003929092556004556005805463ffffffff191663ffffffff90921691909117905550600190505b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156103e95760408051602081019091526006546001600160e01b031681526103d9906103d49084610f04565b610f98565b6001600160901b0316905061048c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146104595760405162461bcd60e51b815260040180806020018281038252602181526020018061135e6021913960400191505060405180910390fd5b60408051602081019091526007546001600160e01b03168152610480906103d49084610f04565b6001600160901b031690505b6104a4610fa061049e836120e9610f9f565b90610ff8565b9392505050565b60035481565b60045481565b6007546001600160e01b031681565b6104ce61103a565b6000546001600160a01b03908116911614610530576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b610591610242565b6105cc5760405162461bcd60e51b81526004018080602001828103825260268152602001806112ef6026913960400191505060405180910390fd5b565b6105d661103a565b6000546001600160a01b03908116911614610638576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600081116106775760405162461bcd60e51b81526004018080602001828103825260228152602001806113a56022913960400191505060405180910390fd5b600181905560025460408051635909c0d560e01b815290516001600160a01b0390921691635909c0d591600480820192602092909190829003018186803b1580156106c157600080fd5b505afa1580156106d5573d6000803e3d6000fd5b505050506040513d60208110156106eb57600080fd5b505160035560025460408051635a3d549360e01b815290516001600160a01b0390921691635a3d549391600480820192602092909190829003018186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d602081101561075f57600080fd5b5051600490815560025460408051630240bc6b60e21b8152905160009384936001600160a01b031692630902f1ac9281830192606092829003018186803b1580156107a957600080fd5b505afa1580156107bd573d6000803e3d6000fd5b505050506040513d60608110156107d357600080fd5b50805160208201516040909201516005805463ffffffff191663ffffffff909216919091179055925090506001600160701b0382161580159061081e57506001600160701b03811615155b61086f576040805162461bcd60e51b815260206004820152601f60248201527f4c65646769747950726963654f7261636c653a204e4f5f524553455256455300604482015290519081900360640190fd5b61088a61087b83610a33565b61088483610a33565b90610a65565b51600680546001600160e01b0319166001600160e01b039092169190911790556108bf6108b682610a33565b61088484610a33565b51600780546001600160e01b0319166001600160e01b03909216919091179055505050565b6006546001600160e01b031681565b60055463ffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b61093161103a565b6000546001600160a01b03908116911614610993576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166109d85760405162461bcd60e51b81526004018080602001828103825260268152602001806113156026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610a3b6112c9565b50604080516020810190915260709190911b6dffffffffffffffffffffffffffff60701b16815290565b610a6d6112c9565b81516001600160e01b0316610ab35760405162461bcd60e51b815260040180806020018281038252602381526020018061133b6023913960400191505060405180910390fd5b815183516001600160e01b0390811691161415610ae257506040805160208101909152600160701b8152610c4c565b82516001600160901b036001600160e01b0390911611610ba757815183516000916001600160e01b03169060701b6dffffffffffffffffffffffffffff191681610b2857fe5b0490506001600160e01b03811115610b87576040805162461bcd60e51b815260206004820152601b60248201527f4669786564506f696e743a3a64697675713a206f766572666c6f770000000000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050610c4c565b6000610bd2600160701b85600001516001600160e01b031685600001516001600160e01b0316610c52565b90506001600160e01b03811115610c30576040805162461bcd60e51b815260206004820152601b60248201527f4669786564506f696e743a3a64697675713a206f766572666c6f770000000000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150505b92915050565b6000806000610c61868661103e565b9150915060008480610c6f57fe5b868809905082811115610c83576001820391505b918290039181610ca157848381610c9657fe5b0493505050506104a4565b848210610cf5576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b610d0083838761106b565b979650505050505050565b63ffffffff421690565b6000806000610d22610d0b565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5d57600080fd5b505afa158015610d71573d6000803e3d6000fd5b505050506040513d6020811015610d8757600080fd5b505160408051635a3d549360e01b815290519194506001600160a01b03861691635a3d549391600480820192602092909190829003018186803b158015610dcd57600080fd5b505afa158015610de1573d6000803e3d6000fd5b505050506040513d6020811015610df757600080fd5b505160408051630240bc6b60e21b81529051919350600091829182916001600160a01b03891691630902f1ac916004808301926060929190829003018186803b158015610e4357600080fd5b505afa158015610e57573d6000803e3d6000fd5b505050506040513d6060811015610e6d57600080fd5b5080516020820151604090920151909450909250905063ffffffff80821690851614610efa5780840363ffffffff8116610eb36001600160701b038086169087166110db565b600001516001600160e01b031602870196508063ffffffff16610ee8856001600160701b0316856001600160701b03166110db565b516001600160e01b0316029590950194505b5050509193909250565b610f0c6112db565b6000821580610f3257505082516001600160e01b031682810290838281610f2f57fe5b04145b610f83576040805162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604482015290519081900360640190fd5b60408051602081019091529081529392505050565b5160701c90565b600082610fae57506000610c4c565b82820282848281610fbb57fe5b04146104a45760405162461bcd60e51b81526004018080602001828103825260218152602001806113c76021913960400191505060405180910390fd5b60006104a483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611227565b3390565b6000808060001984860990508385029250828103915082811015611063576001820391505b509250929050565b6000818103821680838161107b57fe5b04925080858161108757fe5b04945080816000038161109657fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6110e36112c9565b600082116111225760405162461bcd60e51b815260040180806020018281038252602681526020018061137f6026913960400191505060405180910390fd5b8261113c5750604080516020810190915260008152610c4c565b6001600160901b0383116111b857600082607085901b8161115957fe5b0490506001600160e01b03811115610b87576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b60006111c984600160701b85610c52565b90506001600160e01b03811115610b87576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b600081836112b35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611278578181015183820152602001611260565b50505050905090810190601f1680156112a55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816112bf57fe5b0495945050505050565b60408051602081019091526000815290565b604051806020016040528060008152509056fe4c65646769747950726963654f7261636c653a20504552494f445f4e4f545f454c41505345444f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734669786564506f696e743a3a64697675713a206469766973696f6e206279207a65726f4c65646769747950726963654f7261636c653a20494e56414c49445f544f4b454e4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f4c65646769747950726963654f7261636c653a20494e56414c49445f504552494f44536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220cf844673fb3a9d3aecc5fc83dedcd10dd59a7bbe3188d6715c57fe1ef1dc003f64736f6c634300060c00334669786564506f696e743a3a64697675713a206469766973696f6e206279207a65726f4c65646769747950726963654f7261636c653a20494e56414c49445f504552494f44",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "consult(address,uint256)": {
        "details": "Returns the price of tokens."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "tryUpdate()": {
        "details": "Update average price.",
        "returns": {
          "_0": "`true` if update successful; `false` if period has not yet elapsed."
        }
      },
      "update()": {
        "details": "Update average price. Reverts if period has not yet elapsed."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4904,
        "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2543,
        "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
        "label": "period",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2545,
        "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
        "label": "pair",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Pair)4478"
      },
      {
        "astId": 2551,
        "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2553,
        "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2555,
        "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
        "label": "blockTimestampLast",
        "offset": 0,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 2557,
        "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
        "label": "price0Average",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(uq112x112)488_storage"
      },
      {
        "astId": 2559,
        "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
        "label": "price1Average",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(uq112x112)488_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)4478": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_struct(uq112x112)488_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.uq112x112",
        "members": [
          {
            "astId": 487,
            "contract": "contracts/LedgityPriceOracleAdjusted.sol:LedgityPriceOracleAdjusted",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}